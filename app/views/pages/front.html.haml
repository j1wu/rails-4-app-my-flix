%section.site_title
  %h1
    Unlimited Movies for Only 9.99 a Month.
    = link_to "Sign Up Now!", register_path
  %p.sign_up
  %p.sign_in
    Have an account? Please
    = link_to "Sign In", sign_in_path
  %hr
  .bs-example
    %a.btn.btn-sm.btn-warning{"data-toggle" => "modal", :href => "#myModal"} Read Me First
    #myModal.modal.fade
      .modal-dialog
        .modal-content
          .modal-header
            %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", :type => "button"} Ã—
            %h4.modal-title ABOUT MyFliX FOR EVERYONE
          .modal-body
            Test account: user@example.com
            %br/
            Password: 123
            %br/
            %br/
            To register as a new user, you will need to enter dummy credit card information. Enter any expiration date as long as it is in the future, any 3-digit security code code that you wish, and the following dummy credit card number: 4242 4242 4242 4242. Registered users can search for videos, view streaming videos (see the Gandhi video), add videos to the queue, re-order the queue, rate videos, remove videos from the queue, and invite friends to join.
            %br/
            %br/
            This is a non-trivial e-commerce application, a clone of NetFlix, with full payment processing, account management, and administration capabilities, demonstrating what I learned at Tealeaf Academy, building robust and production quality rails application course.
            %br/
            %br/
            PROCESS
            %br/
            Ideation, wireframes, mockups, design and development
            %br/
            Build from the application core to the peripherals
            %br/
            Incremental feature building
            %br/
            %br/
            FRONT-END FRAMEWORKS
            %br/
            HAML
            %br/
            SASS
            %br/
            Twitter Bootstrap
            %br/
            jQuery
            %br/
            %br/
            TEAM COLLABORATION
            %br/
            Feature development with Git branching
            %br/
            Github flow
            %br/
            Code reviews
            %br/
            %br/
            TESTING
            %br/
            The rationale behind testing
            %br/
            Technical debt
            %br/
            Unit, functional, and integration tests
            %br/
            Development and test databases
            %br/
            Shoulda matchers
            %br/
            Ways to write tests
            %br/
            TDD and red / green / refactor
            %br/
            Testing with RSpec
            %br/
            Two styles of writing tests in RSpec
            %br/
            The built-in RSpec matchers
            %br/
            Single assertion principle
            %br/
            Controller tests
            %br/
            Object generation
            %br/
            Generate fake data
            %br/
            Dealing with cardinality and boundary conditions
            %br/
            Refactor with TDD
            %br/
            Growing complexity guided by tests
            %br/
            Interactive debugging for solution discovery
            %br/
            Respond to feature changes
            %br/
            Macros
            %br/
            Shared examples
            %br/
            Feature specs
            %br/
            Capybara
            %br/
            Test doubles and method stubs
            %br/
            Feature tests with Javascript
            %br/
            Testing email sending
            %br/
            Fully integrated API tests
            %br/
            Isolated API tests
            %br/
            Message expectations
            %br/
            Mocking
            %br/
            Stubs and mocks
            %br/
            %br/
            BUILDING APPLICATIONS
            %br/
            Seeding data
            %br/
            Search
            %br/
            Sending emails
            %br/
            Use random tokens
            %br/
            Email service providers
            %br/
            Custom form builders
            %br/
            Custom form builders as gems
            %br/
            Complex forms
            %br/
            Self referential associations
            %br/
            Organize cross cutting functionality with Concerns
            %br/
            Background jobs
            %br/
            Resque and Sidekiq
            %br/
            Amazon S3
            %br/
            Uploading files
            %br/
            Scheduled jobs
            %br/
            Skinny controller, fat model
            %br/
            Structural refactors
            %br/
            Separating actors
            %br/
            Securing access
            %br/
            Wrapping APIs
            %br/
            Responding to webhooks
            %br/
            Collect credit card payments
            %br/
            Checkout
            %br/
            Payment forms
            %br/
            Recurring billing
            %br/
            Handle callback events
            %br/
            Beyond MVC
            %br/
            %br/
            PRODUCTION APPLICATION CONSIDERATIONS
            %br/
            Deploy with procfile and foreman
            %br/
            Deploy with background jobs
            %br/
            Secure sensitive data
            %br/
            Staging and production servers
            %br/
            Deployment pipeline
            %br/
            Production error monitoring
            %br/
            Production service integration
            %br/
            %br/
            WORKFLOWS
            %br/
            Build workflows that involve multiple sub-systems
            %br/
            Complex registration workflow
            %br/
            Invitation workflow
            %br/
            User life cycle management
            %br/
            Social networking
            %br/
            Taking and charging credit cards
            %br/
            Recurring billing
            %br/
            Privileges and access control
            %br/
            Account and billing management
            %br/
            Plan cancellation and lock out
          .modal-footer
            %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"} Close


